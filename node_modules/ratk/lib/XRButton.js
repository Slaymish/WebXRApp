/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
export class ARButton {
    static convertToARButton(button, renderer, options = {}) {
        function showEnterAR() {
            var _a, _b, _c;
            const sessionInit = {
                requiredFeatures: (_a = options.requiredFeatures) !== null && _a !== void 0 ? _a : [],
                optionalFeatures: (_b = options.optionalFeatures) !== null && _b !== void 0 ? _b : [],
            };
            let currentSession;
            async function onSessionStarted(session) {
                var _a;
                session.addEventListener('end', onSessionEnded);
                await renderer.xr.setSession(session);
                button.textContent = (_a = options.LEAVE_XR_TEXT) !== null && _a !== void 0 ? _a : 'EXIT AR';
                currentSession = session;
                if (options.onSessionStarted) {
                    options.onSessionStarted(currentSession);
                }
            }
            function onSessionEnded() {
                var _a;
                if (currentSession) {
                    currentSession.removeEventListener('end', onSessionEnded);
                    button.textContent = (_a = options.ENTER_XR_TEXT) !== null && _a !== void 0 ? _a : 'ENTER AR';
                    if (options.onSessionEnded) {
                        options.onSessionEnded(currentSession);
                    }
                    currentSession = null;
                }
            }
            button.textContent = (_c = options.ENTER_XR_TEXT) !== null && _c !== void 0 ? _c : 'ENTER AR';
            button.onclick = function () {
                if (!currentSession) {
                    if (navigator.xr) {
                        navigator.xr
                            .requestSession('immersive-ar', sessionInit)
                            .then(onSessionStarted)
                            .catch((reason) => {
                            if (options.onFeaturesUnsupported) {
                                options.onFeaturesUnsupported(reason);
                            }
                        });
                    }
                }
                else {
                    currentSession.end();
                }
            };
            if (options.onSupported) {
                options.onSupported();
            }
        }
        function showARNotSupported() {
            var _a;
            button.onclick = null;
            button.classList.add('ar-not-supported');
            button.textContent = (_a = options.XR_NOT_SUPPORTED_TEXT) !== null && _a !== void 0 ? _a : 'AR NOT SUPPORTED';
            if (options.onUnsupported) {
                options.onUnsupported();
            }
        }
        function showARNotAllowed(exception) {
            var _a;
            button.onclick = null;
            button.classList.add('ar-not-allowed');
            button.textContent = (_a = options.XR_NOT_ALLOWED_TEXT) !== null && _a !== void 0 ? _a : 'AR NOT ALLOWED';
            console.warn('Exception when trying to call xr.isSessionSupported', exception);
            if (options.onNotAllowed) {
                options.onNotAllowed(exception);
            }
        }
        if (navigator.xr) {
            navigator.xr
                .isSessionSupported('immersive-ar')
                .then(function (supported) {
                supported ? showEnterAR() : showARNotSupported();
            })
                .catch(showARNotAllowed);
        }
        else {
            showARNotSupported();
        }
    }
    static createButton(renderer, options = {}) {
        const button = document.createElement('button');
        ARButton.convertToARButton(button, renderer, options);
        return button;
    }
}
export class VRButton {
    static convertToVRButton(button, renderer, options = {}) {
        function showEnterVR() {
            var _a, _b, _c;
            const sessionInit = {
                requiredFeatures: (_a = options.requiredFeatures) !== null && _a !== void 0 ? _a : [],
                optionalFeatures: (_b = options.optionalFeatures) !== null && _b !== void 0 ? _b : ['local-floor'],
            };
            let currentSession;
            async function onSessionStarted(session) {
                var _a;
                session.addEventListener('end', onSessionEnded);
                await renderer.xr.setSession(session);
                button.textContent = (_a = options.LEAVE_XR_TEXT) !== null && _a !== void 0 ? _a : 'EXIT VR';
                currentSession = session;
                if (options.onSessionStarted)
                    options.onSessionStarted(currentSession);
            }
            function onSessionEnded() {
                var _a;
                if (currentSession) {
                    currentSession.removeEventListener('end', onSessionEnded);
                    button.textContent = (_a = options.ENTER_XR_TEXT) !== null && _a !== void 0 ? _a : 'ENTER VR';
                    if (options.onSessionEnded)
                        options.onSessionEnded(currentSession);
                    currentSession = null;
                }
            }
            button.textContent = (_c = options.ENTER_XR_TEXT) !== null && _c !== void 0 ? _c : 'ENTER VR';
            button.onclick = function () {
                if (!currentSession) {
                    if (navigator.xr) {
                        navigator.xr
                            .requestSession('immersive-vr', sessionInit)
                            .then(onSessionStarted)
                            .catch((reason) => {
                            if (options.onFeaturesUnsupported) {
                                options.onFeaturesUnsupported(reason);
                            }
                        });
                    }
                }
                else {
                    currentSession.end();
                }
                if (options.onSupported) {
                    options.onSupported();
                }
            };
        }
        function showWebXRNotFound() {
            var _a;
            button.onclick = null;
            button.classList.add('vr-not-supported');
            button.textContent = (_a = options.XR_NOT_SUPPORTED_TEXT) !== null && _a !== void 0 ? _a : 'VR NOT SUPPORTED';
            if (options.onUnsupported)
                options.onUnsupported();
        }
        function showVRNotAllowed(exception) {
            var _a;
            button.onclick = null;
            button.classList.add('vr-not-allowed');
            button.textContent = (_a = options.XR_NOT_ALLOWED_TEXT) !== null && _a !== void 0 ? _a : 'VR NOT ALLOWED';
            console.warn('Exception when trying to call xr.isSessionSupported', exception);
            if (options.onNotAllowed)
                options.onNotAllowed(exception);
        }
        if (navigator.xr) {
            navigator.xr
                .isSessionSupported('immersive-vr')
                .then(function (supported) {
                supported ? showEnterVR() : showWebXRNotFound();
                if (supported && VRButton.xrSessionIsGranted) {
                    button.click();
                }
            })
                .catch(showVRNotAllowed);
        }
        else {
            showWebXRNotFound();
        }
    }
    static registerSessionGrantedListener() {
        if (navigator.xr) {
            // WebXRViewer (based on Firefox) has a bug where addEventListener
            // throws a silent exception and aborts execution entirely.
            if (/WebXRViewer\//i.test(navigator.userAgent))
                return;
            navigator.xr.addEventListener('sessiongranted', () => {
                VRButton.xrSessionIsGranted = true;
            });
        }
    }
    static createButton(renderer, options = {}) {
        const button = document.createElement('button');
        VRButton.convertToVRButton(button, renderer, options);
        return button;
    }
}
VRButton.xrSessionIsGranted = false;
VRButton.registerSessionGrantedListener();
//# sourceMappingURL=XRButton.js.map