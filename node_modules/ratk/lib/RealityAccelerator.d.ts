/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="webxr" />
import { Anchor } from './Anchor';
import { Group, Quaternion, Vector3, WebXRManager } from 'three';
import { HitTestTarget } from './HitTestTarget';
import { Plane } from './Plane';
import { RMesh } from './Mesh';
export declare class RealityAccelerator {
    private _xrManager;
    private _planes;
    private _meshes;
    private _anchors;
    private _hitTestTargets;
    private _root;
    private _currentSession?;
    constructor(xrManager: WebXRManager);
    get root(): Group;
    get planes(): Set<Plane>;
    get meshes(): Set<RMesh>;
    get anchors(): Set<Anchor>;
    get hitTestTargets(): Set<HitTestTarget>;
    get persistentAnchors(): Set<Anchor>;
    onPlaneAdded?: (_arg: Plane) => void;
    onPlaneDeleted?: (_arg: Plane) => void;
    onMeshAdded?: (_arg: RMesh) => void;
    onMeshDeleted?: (_arg: RMesh) => void;
    update(): void;
    private _handleSessionUpdate;
    private _checkPlaneDiff;
    private _checkMeshDiff;
    createAnchor(position: Vector3, quaternion: Quaternion, persistent?: boolean): Promise<Anchor>;
    deleteAnchor(anchor: Anchor): Promise<void>;
    restorePersistentAnchors(): Promise<void>;
    createHitTestTargetFromSpace(space: XRSpace, offsetOrigin?: Vector3, offsetDirection?: Vector3): Promise<HitTestTarget>;
    createHitTestTargetFromViewerSpace(offsetOrigin?: Vector3, offsetDirection?: Vector3): Promise<HitTestTarget>;
    createHitTestTargetFromControllerSpace(handedness: XRHandedness, offsetOrigin?: Vector3, offsetDirection?: Vector3): Promise<HitTestTarget>;
    deleteHitTestTarget(hitTestTarget: HitTestTarget): void;
}
//# sourceMappingURL=RealityAccelerator.d.ts.map