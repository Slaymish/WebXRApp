hamishburke@hamishburke ~/D/C/W/R/src (main)> tree -L 2
.
├── ARButton.js
├── assets
│   └── Prop_Camera.glb
├── global.js
├── index.html
├── index.js
├── landing.js
├── output.txt
├── player.js
├── prompt_maker.py
├── scene.js
├── spawner.js
├── spin.js
├── styles
│   └── index.css
└── venv
    ├── bin
    ├── include
    ├── lib
    └── pyvenv.cfg

7 directories, 14 files

./index.html:

"""
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1, shrink-to-fit=no"
		/>
		<title>Spatial UI Test Zone</title>
		<!-- CSS only -->
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css"
			rel="stylesheet"
			integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor"
			crossorigin="anonymous"
		/>
		<!-- JavaScript Bundle with Popper -->
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
			integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2"
			crossorigin="anonymous"
		></script>
	</head>
	<body style="margin: 0">
		<div id="scene-container" style="display: block"></div>

		<div
			id="ui-panel"
			class="card"
			style="position: absolute; top: 10px; left: 10px; z-index: 1"
		>
			<div class="card-body">
				<h5 class="card-title">Spatial UI Test Zone</h5>
				<p class="card-subtitle mb-2 text-body-secondary">
					This is a test environment for spatial computing UI components.
				</p>
				<div class="form-check form-switch">
					<input
						class="form-check-input"
						type="checkbox"
						role="switch"
						id="use-hit-test"
					/>
					<label class="form-check-label" for="use-hit-test"
						>Use hit-test to select spawning location</label
					>
				</div>
				<div class="form-check form-switch">
					<input
						class="form-check-input"
						type="checkbox"
						role="switch"
						id="use-anchor"
					/>
					<label class="form-check-label" for="use-anchor"
						>Attach spawned objects to spatial anchors</label
					>
				</div>

				<button id="ar-button" type="button" class="btn action-button">
					ENTER AR
				</button>
				<button id="web-launch-button" type="button" class="btn action-button">
					OPEN ON META QUEST
				</button>
			</div>
		</div>

		<!-- JavaScript -->
		<script type="module" src="./index.js"></script>
	</body>
</html>

"""

./scene.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
	DirectionalLight,
	HemisphereLight,
	PerspectiveCamera,
	Scene,
	WebGLRenderer,
	sRGBEncoding,
} from 'three';

export const setupScene = () => {
	const scene = new Scene();

	const camera = new PerspectiveCamera(
		50,
		window.innerWidth / window.innerHeight,
		0.1,
		10,
	);

	scene.add(new HemisphereLight(0x606060, 0x404040));

	const light = new DirectionalLight(0xffffff);
	light.position.set(1, 1, 1).normalize();
	scene.add(light);

	const renderer = new WebGLRenderer({ alpha: true, antialias: true });
	renderer.setPixelRatio(window.devicePixelRatio);
	renderer.setSize(window.innerWidth, window.innerHeight);
	renderer.outputEncoding = sRGBEncoding;
	renderer.xr.enabled = true;
	document.body.appendChild(renderer.domElement);

	window.addEventListener('resize', function () {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize(window.innerWidth, window.innerHeight);
	});

	return { scene, camera, renderer };
};

"""

./prompt_maker.py:

"""
import os
import subprocess
import pyperclip

def list_files(directory='.'):
    file_list = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_list.append(os.path.join(root, file))
    return file_list

def read_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except UnicodeDecodeError:
        return f"<Error: Unable to read file {file_path} with UTF-8 encoding>"

def write_output(file_list, output_file):
    count = 0
    with open(output_file, 'a', encoding='utf-8') as out_file:
        for file in file_list:
            if count >= 10:
                break
            out_file.write(f"{file}:\n\n")
            out_file.write(f'"""\n{read_file(file)}\n"""\n\n')
            count += 1

def generate_tree_output(directory='.'):
    try:
        result = subprocess.run(['tree', '-L', '2', directory], capture_output=True, text=True)
        return result.stdout
    except FileNotFoundError:
        return "<Error: 'tree' command not found. Please install it to use this feature.>"

if __name__ == "__main__":
    directory = input("Enter the directory to scan (default is current directory): ") or '.'
    output_file = 'output.txt'
    
    # Get the tree output
    tree_output = generate_tree_output(directory)
    
    # Write the tree output to the file
    with open(output_file, 'w', encoding='utf-8') as out_file:
        out_file.write(f"hamishburke@hamishburke ~/D/C/W/R/src (main)> tree -L 2\n{tree_output}\n")
    
    # Get the list of files and write their contents to the output file
    file_list = list_files(directory)
    write_output(file_list, output_file)
    
    print(f"Output written to {output_file}")
    
    # Ask the user if they want to copy the output to the clipboard
    copy_to_clipboard = input("Do you want to copy the output to the clipboard? (y/n): ").strip().lower()
    if copy_to_clipboard == 'y':
        with open(output_file, 'r', encoding='utf-8') as out_file:
            pyperclip.copy(out_file.read())
        print("Output copied to clipboard.")


"""

./landing.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
	BackSide,
	IcosahedronGeometry,
	Mesh,
	MeshStandardMaterial,
} from 'three';

import { ARButton } from './ARButton';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { GlobalComponent } from './global';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { System } from 'elics';

const CAMERA_ANGULAR_SPEED = Math.PI;

export class InlineSystem extends System {
	init() {
		this.needsSetup = true;
	}

	_loadModel(global) {
		const loader = new GLTFLoader();
		const { camera, scene, renderer } = global;
		this.container = new Mesh(
			new IcosahedronGeometry(1, 1),
			new MeshStandardMaterial({ side: BackSide, color: 0x2e2e2e }),
		);
		scene.add(this.container);
		camera.position.set(0, 0.1, 0.4);
		loader.load('assets/Prop_Camera.glb', (gltf) => {
			const model = gltf.scene;
			this.container.add(model);
			model.name = 'mesh-prototype';
		});

		this.orbitControls = new OrbitControls(camera, renderer.domElement);
		this.orbitControls.target.set(0, 0, 0);
		this.orbitControls.update();
		this.orbitControls.enableZoom = false;
		this.orbitControls.enablePan = false;
		this.orbitControls.enableDamping = true;
		this.orbitControls.autoRotate = true;
		this.orbitControls.rotateSpeed *= -0.5;
		this.orbitControls.autoRotateSpeed = CAMERA_ANGULAR_SPEED;
		this.wasPresenting = false;
	}

	_setupButtons(global) {
		const arButton = document.getElementById('ar-button');
		const webLaunchButton = document.getElementById('web-launch-button');
		webLaunchButton.style.display = 'none';
		ARButton.convertToARButton(arButton, global.renderer, {
			sessionInit: {
				requiredFeatures: ['hit-test', 'plane-detection', 'anchors'],
				optionalFeatures: ['local-floor', 'bounded-floor', 'layers'],
			},
			onUnsupported: () => {
				arButton.style.display = 'none';
				webLaunchButton.style.display = 'block';
			},
		});
		webLaunchButton.onclick = () => {
			window.open(
				'https://www.oculus.com/open_url/?url=' +
					encodeURIComponent(window.location.href),
			);
		};
	}

	update() {
		const global = this.getEntities(this.queries.global)[0].getComponent(
			GlobalComponent,
		);

		if (this.needsSetup) {
			this._loadModel(global);
			this._setupButtons(global);
			this.needsSetup = false;
			return;
		}

		const isPresenting = global.renderer.xr.isPresenting;
		if (!this.wasPresenting && isPresenting) {
			this.container.visible = false;
			global.scene.traverse((object) => {
				if (object.userData.arOnly) {
					object.visible = true;
				}
			});
		} else if (this.wasPresenting && !isPresenting) {
			this.container.visible = true;
			global.camera.position.set(0, 0.1, 0.4);
			global.scene.traverse((object) => {
				if (object.userData.arOnly) {
					object.visible = false;
				}
			});
		}

		if (this.container.visible) {
			this.orbitControls.update();
		}

		this.wasPresenting = isPresenting;
	}
}

InlineSystem.queries = {
	global: { required: [GlobalComponent] },
};

"""

./global.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { Component } from 'elics';

export class GlobalComponent extends Component {}

"""

./index.js:

"""
/* eslint-disable sort-imports */
/* eslint-disable no-unused-vars */
/**
 * Custom App: Spatial UI Test Zone
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import './styles/index.css';

import { Clock, DoubleSide, MeshBasicMaterial, SkeletonHelper } from 'three';
import { PlayerComponent, PlayerSystem } from './player';
import { SpinComponent, SpinSystem } from './spin';

import { World } from 'elics';
import { RealityAccelerator } from 'ratk';
import { GlobalComponent } from './global';
import { InlineSystem } from './landing';
import { setupScene } from './scene';
import { SpawnSystem } from './spawner';

const world = new World();
world
    .registerComponent(GlobalComponent)
    .registerComponent(PlayerComponent)
    .registerComponent(SpinComponent)
    .registerSystem(PlayerSystem)
    .registerSystem(SpawnSystem)
    .registerSystem(SpinSystem)
    .registerSystem(InlineSystem);
const clock = new Clock();

console.log('Execution order:', ...world.getSystems());

const { scene, camera, renderer } = setupScene();
const ratk = new RealityAccelerator(renderer.xr);
ratk.onPlaneAdded = (plane) => {
    const mesh = plane.planeMesh;
    mesh.material = new MeshBasicMaterial({
        transparent: true,
        opacity: 0.3,
        color: Math.random() * 0xffffff,
        side: DoubleSide,
    });
};
scene.add(ratk.root);

renderer.xr.addEventListener('sessionstart', () => {
    setTimeout(() => {
        if (ratk.planes.size == 0) {
            renderer.xr
                .getSession()
                .initiateRoomCapture()
                .then(() => {
                    console.log('room capture complete');
                });
        }
    }, 5000);

    // Enable hand tracking
    const session = renderer.xr.getSession();
    session.requestReferenceSpace('local').then((refSpace) => {
        session.requestAnimationFrame((time, frame) => {
            const inputSources = session.inputSources;
            for (const inputSource of inputSources) {
                if (inputSource.hand) {
                    const skeletonHelper = new SkeletonHelper(inputSource.hand);
                    skeletonHelper.material.linewidth = 2;
                    scene.add(skeletonHelper);
                }
            }
        });
    });
});

world
    .createEntity()
    .addComponent(GlobalComponent, { renderer, camera, scene, ratk });

renderer.setAnimationLoop(function () {
    ratk.update();

    const delta = clock.getDelta();
    const time = clock.elapsedTime;
    world.update(delta, time);

    renderer.render(scene, camera);
});

"""

./spin.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { Component, System } from 'elics';

import { GlobalComponent } from './global';
import { Vector3 } from 'three';

export class SpinComponent extends Component {}

export class SpinSystem extends System {
	update(delta) {
		const global = this.getEntities(this.queries.global)[0].getComponent(
			GlobalComponent,
		);
		// update existing spin entities
		const xrCamera = global.renderer.xr.getCamera();
		for (const entity of this.getEntities(this.queries.spinners)) {
			const spinComponet = entity.getComponent(SpinComponent);
			const distance = spinComponet.object3D
				.getWorldPosition(new Vector3())
				.distanceTo(xrCamera.position);
			// calculate object angular speed based on distance between the object and headset
			spinComponet.angularSpeed = Math.min(10, (1 / distance) * 2);
			// make the object spin
			spinComponet.object3D.rotateY(spinComponet.angularSpeed * delta);
		}
	}
}

SpinSystem.queries = {
	global: { required: [GlobalComponent] },
	spinners: { required: [SpinComponent] },
};

"""

./player.js:

"""
/**
 * Custom App: Spatial UI Test Zone
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { Component, System } from 'elics';
import { Group, SkeletonHelper } from 'three';
import { GlobalComponent } from './global';

export class PlayerComponent extends Component {}

export class PlayerSystem extends System {
    _setup(global) {
        const { renderer, camera, scene } = global;
        const hands = {};

        const playerSpace = new Group();
        playerSpace.add(camera);
        this.world.createEntity().addComponent(PlayerComponent, {
            space: playerSpace,
            hands: hands,
        });

        const session = renderer.xr.getSession();
        session.addEventListener('inputsourceschange', () => {
            session.inputSources.forEach((inputSource) => {
                if (inputSource.hand) {
                    if (!hands[inputSource.handedness]) {
                        const skeletonHelper = new SkeletonHelper(inputSource.hand);
                        skeletonHelper.material.linewidth = 2;
                        scene.add(skeletonHelper);
                        hands[inputSource.handedness] = skeletonHelper;
                    }
                }
            });
        });
    }

    update() {
        const global = this.getEntities(this.queries.global)[0].getComponent(
            GlobalComponent,
        );

        const player = this.getEntities(this.queries.player)[0]?.getComponent(
            PlayerComponent,
        );

        if (!player) {
            this._setup(global);
        } else {
            // Update hands if necessary
            Object.values(player.hands).forEach((handHelper) => {
                if (handHelper) {
                    handHelper.update();
                }
            });
        }
    }
}

PlayerSystem.queries = {
    global: { required: [GlobalComponent] },
    player: { required: [PlayerComponent] },
};

"""

./output.txt:

"""
hamishburke@hamishburke ~/D/C/W/R/src (main)> tree -L 2
.
├── ARButton.js
├── assets
│   └── Prop_Camera.glb
├── global.js
├── index.html
├── index.js
├── landing.js
├── output.txt
├── player.js
├── prompt_maker.py
├── scene.js
├── spawner.js
├── spin.js
├── styles
│   └── index.css
└── venv
    ├── bin
    ├── include
    ├── lib
    └── pyvenv.cfg

7 directories, 14 files

./index.html:

"""
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1, shrink-to-fit=no"
		/>
		<title>Spatial UI Test Zone</title>
		<!-- CSS only -->
		<link
			href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css"
			rel="stylesheet"
			integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor"
			crossorigin="anonymous"
		/>
		<!-- JavaScript Bundle with Popper -->
		<script
			src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
			integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2"
			crossorigin="anonymous"
		></script>
	</head>
	<body style="margin: 0">
		<div id="scene-container" style="display: block"></div>

		<div
			id="ui-panel"
			class="card"
			style="position: absolute; top: 10px; left: 10px; z-index: 1"
		>
			<div class="card-body">
				<h5 class="card-title">Spatial UI Test Zone</h5>
				<p class="card-subtitle mb-2 text-body-secondary">
					This is a test environment for spatial computing UI components.
				</p>
				<div class="form-check form-switch">
					<input
						class="form-check-input"
						type="checkbox"
						role="switch"
						id="use-hit-test"
					/>
					<label class="form-check-label" for="use-hit-test"
						>Use hit-test to select spawning location</label
					>
				</div>
				<div class="form-check form-switch">
					<input
						class="form-check-input"
						type="checkbox"
						role="switch"
						id="use-anchor"
					/>
					<label class="form-check-label" for="use-anchor"
						>Attach spawned objects to spatial anchors</label
					>
				</div>

				<button id="ar-button" type="button" class="btn action-button">
					ENTER AR
				</button>
				<button id="web-launch-button" type="button" class="btn action-button">
					OPEN ON META QUEST
				</button>
			</div>
		</div>

		<!-- JavaScript -->
		<script type="module" src="./index.js"></script>
	</body>
</html>

"""

./scene.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
	DirectionalLight,
	HemisphereLight,
	PerspectiveCamera,
	Scene,
	WebGLRenderer,
	sRGBEncoding,
} from 'three';

export const setupScene = () => {
	const scene = new Scene();

	const camera = new PerspectiveCamera(
		50,
		window.innerWidth / window.innerHeight,
		0.1,
		10,
	);

	scene.add(new HemisphereLight(0x606060, 0x404040));

	const light = new DirectionalLight(0xffffff);
	light.position.set(1, 1, 1).normalize();
	scene.add(light);

	const renderer = new WebGLRenderer({ alpha: true, antialias: true });
	renderer.setPixelRatio(window.devicePixelRatio);
	renderer.setSize(window.innerWidth, window.innerHeight);
	renderer.outputEncoding = sRGBEncoding;
	renderer.xr.enabled = true;
	document.body.appendChild(renderer.domElement);

	window.addEventListener('resize', function () {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize(window.innerWidth, window.innerHeight);
	});

	return { scene, camera, renderer };
};

"""

./prompt_maker.py:

"""
import os
import subprocess
import pyperclip

def list_files(directory='.'):
    file_list = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_list.append(os.path.join(root, file))
    return file_list

def read_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except UnicodeDecodeError:
        return f"<Error: Unable to read file {file_path} with UTF-8 encoding>"

def write_output(file_list, output_file):
    count = 0
    with open(output_file, 'a', encoding='utf-8') as out_file:
        for file in file_list:
            if count >= 10:
                break
            out_file.write(f"{file}:\n\n")
            out_file.write(f'"""\n{read_file(file)}\n"""\n\n')
            count += 1

def generate_tree_output(directory='.'):
    try:
        result = subprocess.run(['tree', '-L', '2', directory], capture_output=True, text=True)
        return result.stdout
    except FileNotFoundError:
        return "<Error: 'tree' command not found. Please install it to use this feature.>"

if __name__ == "__main__":
    directory = input("Enter the directory to scan (default is current directory): ") or '.'
    output_file = 'output.txt'
    
    # Get the tree output
    tree_output = generate_tree_output(directory)
    
    # Write the tree output to the file
    with open(output_file, 'w', encoding='utf-8') as out_file:
        out_file.write(f"hamishburke@hamishburke ~/D/C/W/R/src (main)> tree -L 2\n{tree_output}\n")
    
    # Get the list of files and write their contents to the output file
    file_list = list_files(directory)
    write_output(file_list, output_file)
    
    print(f"Output written to {output_file}")
    
    # Ask the user if they want to copy the output to the clipboard
    copy_to_clipboard = input("Do you want to copy the output to the clipboard? (y/n): ").strip().lower()
    if copy_to_clipboard == 'y':
        with open(output_file, 'r', encoding='utf-8') as out_file:
            pyperclip.copy(out_file.read())
        print("Output copied to clipboard.")


"""

./landing.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
	BackSide,
	IcosahedronGeometry,
	Mesh,
	MeshStandardMaterial,
} from 'three';

import { ARButton } from './ARButton';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { GlobalComponent } from './global';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { System } from 'elics';

const CAMERA_ANGULAR_SPEED = Math.PI;

export class InlineSystem extends System {
	init() {
		this.needsSetup = true;
	}

	_loadModel(global) {
		const loader = new GLTFLoader();
		const { camera, scene, renderer } = global;
		this.container = new Mesh(
			new IcosahedronGeometry(1, 1),
			new MeshStandardMaterial({ side: BackSide, color: 0x2e2e2e }),
		);
		scene.add(this.container);
		camera.position.set(0, 0.1, 0.4);
		loader.load('assets/Prop_Camera.glb', (gltf) => {
			const model = gltf.scene;
			this.container.add(model);
			model.name = 'mesh-prototype';
		});

		this.orbitControls = new OrbitControls(camera, renderer.domElement);
		this.orbitControls.target.set(0, 0, 0);
		this.orbitControls.update();
		this.orbitControls.enableZoom = false;
		this.orbitControls.enablePan = false;
		this.orbitControls.enableDamping = true;
		this.orbitControls.autoRotate = true;
		this.orbitControls.rotateSpeed *= -0.5;
		this.orbitControls.autoRotateSpeed = CAMERA_ANGULAR_SPEED;
		this.wasPresenting = false;
	}

	_setupButtons(global) {
		const arButton = document.getElementById('ar-button');
		const webLaunchButton = document.getElementById('web-launch-button');
		webLaunchButton.style.display = 'none';
		ARButton.convertToARButton(arButton, global.renderer, {
			sessionInit: {
				requiredFeatures: ['hit-test', 'plane-detection', 'anchors'],
				optionalFeatures: ['local-floor', 'bounded-floor', 'layers'],
			},
			onUnsupported: () => {
				arButton.style.display = 'none';
				webLaunchButton.style.display = 'block';
			},
		});
		webLaunchButton.onclick = () => {
			window.open(
				'https://www.oculus.com/open_url/?url=' +
					encodeURIComponent(window.location.href),
			);
		};
	}

	update() {
		const global = this.getEntities(this.queries.global)[0].getComponent(
			GlobalComponent,
		);

		if (this.needsSetup) {
			this._loadModel(global);
			this._setupButtons(global);
			this.needsSetup = false;
			return;
		}

		const isPresenting = global.renderer.xr.isPresenting;
		if (!this.wasPresenting && isPresenting) {
			this.container.visible = false;
			global.scene.traverse((object) => {
				if (object.userData.arOnly) {
					object.visible = true;
				}
			});
		} else if (this.wasPresenting && !isPresenting) {
			this.container.visible = true;
			global.camera.position.set(0, 0.1, 0.4);
			global.scene.traverse((object) => {
				if (object.userData.arOnly) {
					object.visible = false;
				}
			});
		}

		if (this.container.visible) {
			this.orbitControls.update();
		}

		this.wasPresenting = isPresenting;
	}
}

InlineSystem.queries = {
	global: { required: [GlobalComponent] },
};

"""

./global.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { Component } from 'elics';

export class GlobalComponent extends Component {}

"""

./index.js:

"""
/* eslint-disable sort-imports */
/* eslint-disable no-unused-vars */
/**
 * Custom App: Spatial UI Test Zone
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import './styles/index.css';

import { Clock, DoubleSide, MeshBasicMaterial, SkeletonHelper } from 'three';
import { PlayerComponent, PlayerSystem } from './player';
import { SpinComponent, SpinSystem } from './spin';

import { World } from 'elics';
import { RealityAccelerator } from 'ratk';
import { GlobalComponent } from './global';
import { InlineSystem } from './landing';
import { setupScene } from './scene';
import { SpawnSystem } from './spawner';

const world = new World();
world
    .registerComponent(GlobalComponent)
    .registerComponent(PlayerComponent)
    .registerComponent(SpinComponent)
    .registerSystem(PlayerSystem)
    .registerSystem(SpawnSystem)
    .registerSystem(SpinSystem)
    .registerSystem(InlineSystem);
const clock = new Clock();

console.log('Execution order:', ...world.getSystems());

const { scene, camera, renderer } = setupScene();
const ratk = new RealityAccelerator(renderer.xr);
ratk.onPlaneAdded = (plane) => {
    const mesh = plane.planeMesh;
    mesh.material = new MeshBasicMaterial({
        transparent: true,
        opacity: 0.3,
        color: Math.random() * 0xffffff,
        side: DoubleSide,
    });
};
scene.add(ratk.root);

renderer.xr.addEventListener('sessionstart', () => {
    setTimeout(() => {
        if (ratk.planes.size == 0) {
            renderer.xr
                .getSession()
                .initiateRoomCapture()
                .then(() => {
                    console.log('room capture complete');
                });
        }
    }, 5000);

    // Enable hand tracking
    const session = renderer.xr.getSession();
    session.requestReferenceSpace('local').then((refSpace) => {
        session.requestAnimationFrame((time, frame) => {
            const inputSources = session.inputSources;
            for (const inputSource of inputSources) {
                if (inputSource.hand) {
                    const skeletonHelper = new SkeletonHelper(inputSource.hand);
                    skeletonHelper.material.linewidth = 2;
                    scene.add(skeletonHelper);
                }
            }
        });
    });
});

world
    .createEntity()
    .addComponent(GlobalComponent, { renderer, camera, scene, ratk });

renderer.setAnimationLoop(function () {
    ratk.update();

    const delta = clock.getDelta();
    const time = clock.elapsedTime;
    world.update(delta, time);

    renderer.render(scene, camera);
});

"""

./spin.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { Component, System } from 'elics';

import { GlobalComponent } from './global';
import { Vector3 } from 'three';

export class SpinComponent extends Component {}

export class SpinSystem extends System {
	update(delta) {
		const global = this.getEntities(this.queries.global)[0].getComponent(
			GlobalComponent,
		);
		// update existing spin entities
		const xrCamera = global.renderer.xr.getCamera();
		for (const entity of this.getEntities(this.queries.spinners)) {
			const spinComponet = entity.getComponent(SpinComponent);
			const distance = spinComponet.object3D
				.getWorldPosition(new Vector3())
				.distanceTo(xrCamera.position);
			// calculate object angular speed based on distance between the object and headset
			spinComponet.angularSpeed = Math.min(10, (1 / distance) * 2);
			// make the object spin
			spinComponet.object3D.rotateY(spinComponet.angularSpeed * delta);
		}
	}
}

SpinSystem.queries = {
	global: { required: [GlobalComponent] },
	spinners: { required: [SpinComponent] },
};

"""

./player.js:


"""

./ARButton.js:

"""
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

export class ARButton {
	static convertToARButton(button, renderer, options = {}) {
		function showStartAR(/*device*/) {
			const sessionInit = options.sessionInit ?? { optionalFeatures: [] };
			let currentSession;

			async function onSessionStarted(session) {
				session.addEventListener('end', onSessionEnded);
				renderer.xr.setReferenceSpaceType('local');
				await renderer.xr.setSession(session);
				button.textContent = options.LEAVE_AR_TEXT ?? 'EXIT AR';
				currentSession = session;
				if (options.onSessionStarted) options.onSessionStarted(currentSession);
			}

			function onSessionEnded(/*event*/) {
				currentSession.removeEventListener('end', onSessionEnded);
				button.textContent = options.ENTER_AR_TEXT ?? 'ENTER AR';
				if (options.onSessionEnded) options.onSessionEnded(currentSession);
				currentSession = null;
			}

			button.textContent = options.ENTER_AR_TEXT ?? 'ENTER AR';

			button.onclick = function () {
				if (!currentSession) {
					navigator.xr
						.requestSession('immersive-ar', sessionInit)
						.then(onSessionStarted);
				} else {
					currentSession.end();
				}
			};
		}

		function showARNotSupported() {
			button.onclick = null;
			button.classList.add('ar-not-supported');
			button.textContent = options.AR_NOT_SUPPORTED_TEXT ?? 'AR NOT SUPPORTED';
			if (options.onUnsupported) options.onUnsupported();
		}

		function showARNotAllowed(exception) {
			button.onclick = null;
			button.classList.add('ar-not-allowed');
			button.textContent = options.AR_NOT_ALLOWED_TEXT ?? 'AR NOT ALLOWED';
			console.warn(
				'Exception when trying to call xr.isSessionSupported',
				exception,
			);
			if (options.onNotAllowed) options.onNotAllowed(exception);
		}

		if ('xr' in navigator) {
			navigator.xr
				.isSessionSupported('immersive-ar')
				.then(function (supported) {
					supported ? showStartAR() : showARNotSupported();
				})
				.catch(showARNotAllowed);
		} else {
			showARNotSupported();
		}
	}

	static createButton(renderer, options = {}) {
		const button = document.createElement('button');
		ARButton.convertToARButton(button, renderer, options);
		return button;
	}
}

"""

